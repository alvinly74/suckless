c
n
player['rank']
continue
ranks_hash[player['summonerId'].to_s][0]['entries'][0]['division']
ranks_hash[player['summonerId'].to_s][0]['entries'][0]['division]
ranks_hash[player['summonerId'].to_s][0]['entries'][0]
ranks_hash[player['summonerId'].to_s][0]['entries'].class
ranks_hash[player['summonerId'].to_s][0]['entries']
ranks_hash[player['summonerId'].to_s][0]['entries']['division']
ranks_hash[player['summonerId'].to_s][0]['entries']
ranks_hash[player['summonerId'].to_s][0]
ranks_hash[player['summonerId'].to_s[0]
c
cc
c
cc
c
continue
ranks_hash[player['summonerId'].to_s][0]['entries']
ranks_hash[player['summonerId'].to_s][0]['queue']
ranks_hash[player['summonerId'].to_s][0]['tier']
ranks_hash[player['summonerId'].to_s][0].keys
ranks_hash[player['summonerId'].to_s][0].class
ranks_hash[player['summonerId'].to_s][0]
ranks_hash[player['summonerId'].to_s][0]['leaguePoints']
ranks_hash[player['summonerId'].to_s][0]['division']
ranks_hash[player['summonerId'].to_s][0]
ranks_hash[player['summonerId'].to_s]
ranks_hash[player[
player['rank']
c
continue
player['rank'][0]['queue'] == 'RANKED_SOLO_5x5'
player['rank'][0]
player['rank'].class
player['rank']
continue
game['participants'][0]['rank'][0]
game['participants'][0]['rank'].[0]
game['participants'][0]['rank'].class
game['participants'][0]['rank'].keys
game['participants'][0]['rank']
game['participants'][0].keys
game['participants'][0].class
game['participants'][0]['rank']
game['participants'][0]
continue
game['participants'][0]['summonerId'].class
game['participants'][0]['summonerId']
game['participants'][0]
game['participants'].class[0]
game['participants'].class
game['participants']
ranks_hash
game['participants'][0]['rank']
game['participants'][0]
game['participants']['rank']
game['participants']
continue
ranks_hash.class
ranks_hash
continue
summoner_ranks.class
summoner_ranks
continue
game = summoner_ids
summoner_ranks
continue
game = summoner_ids
continue
game = summoner_ids
summoner_ids
summoner_id
game
continue
summoner_ids
continue
a = game['participants'].map{|el| el['summonerId']}.join(",")
a.join(",")
a = game['participants'].map{|el| el['summonerId']}
game['participants'].map{|el| el['summonerId']}
game['participants'].map{|el| el['summonerId']
game['participants'].keys
game['participants']
game.mapId
game.keys
game
continue
user_id
n
continue
user_id
n
@username
continue
spectator_game
continue
item_object['data'].keys
item_object['data']
item_object.keys
item_object['basic']
item_object.['basic']
item_object.keys
item_object
continue
debugger
continue
champ_object['keys'].keys.sort
champ_object['keys'].keys
champ_object['keys']
champ_object['keys'].values.sort
champ_object['keys'].values
champ_object['keys']
champ_object.keys
champ_object['data']
champ_object['version']
champ_object['format']
champ_object['type']
champ_object.keys
champ_object['keys'].keys.count
champ_object['keys']
champ_object
champ_object.keys
champ_object
continue
@champs
continue
n
continue
n
continue
n
c
n
performed?
n
spectator_game
n
continue
next
spectator_game[0]
continue
n
spectator_game
continue
spectator_game
continue
spectator_game
continue
spectator_game[0]
spectator_game
JSON.try(:parse,"test")
"string".try(:split,"")
JSON.try(:parse,spectator_game.gsub('=>',':'))
JSON.try(:parse,"test")
JSON.try(:parse)
JSON.try(:parse
JSON.try
JSON
Json
JSON.try(:parse,spectator_game.gsub('=>',':'))
JSON.try(:parse)
JSON.methods.sort
JSON.methods
spectator_game.gsub('=>', ':')
JSON.parse(spectator_game.gsub('=>', ':'))
spectator_game
continue
spectator_game
continue
spectator_game
c
user_id[@username]["id"].class
user_id[@username]["id"]
user_id
c
a[@username]
a
c
JSON.parse result.gsub('=>', ':')
result
a
a[@username.to_sym][:id]
a[@username.to_sym].id
a[@username.to_sym]
a[:darkirby]
a
a[@username]
@username
username
a[username]
a = eval(result)
eval(result)
result
continue
url.class
url
url[username]
@username
continue
url
continue
url.path
url.port
url.host
req.try
req.methods.sort
req.methods
req
next
req
url
next
continue
next
continue
next
continue
ENV["path"]
ENV[:path]
ENV.path
ENV.keys.sort
ENV.keys
ENV
ENV["SECRET_KEY_BASE"]
ENV["riot_api"]
riot_api
@username
continue
params
